angular.module("poketrainer",["poketrainer.Module.Templates","Poketrainer.Module.SocketEventEmitter","Poketrainer.Service.Navigation","Poketrainer.Service.SocketEvent","Poketrainer.Service.Socket","Poketrainer.Service.UserList","Poketrainer.State.Abstracts","Poketrainer.State.Status","Poketrainer.State.Users","ui.router","ngMaterial","ngMessages"]).config(["$urlRouterProvider","$locationProvider","$urlMatcherFactoryProvider","$mdThemingProvider",function(e,t,r,n){e.rule(function(e,t){var r=t.url().toLowerCase();if(!("/"===r[r.length-1]||r.indexOf("/?")>-1))return r.indexOf("?")>-1?r.replace("?","/?"):r+"/"}).otherwise("/"),r.strictMode(!1),n.theme("default").primaryPalette("blue").accentPalette("red")}]).run(["$state","$rootScope","$document",function(e,t,r){t.$on("inventory:updated",function(e,t){}),t.$on("$stateChangeStart",function(){r.find(".screen-loading-overlay").removeClass("hidden")}),t.$on("$stateChangeSuccess",function(){r.find(".screen-loading-overlay").addClass("hidden")}),t.$on("$stateChangeError",function(t,n,o,a,s,i){"offline"===i&&(e.go("public.users"),r.find(".screen-loading-overlay").removeClass("hidden"))})}]),angular.module("Poketrainer.Module.SocketEventEmitter",["Poketrainer.Service.Socket"]).run(["$rootScope","PokeSocket","SocketEvent",function(e,t,r){t.forward(r.UserStatus),t.on(r.Data,function(t){e.$broadcast(t.event+":"+t.action,t.data)})}]),angular.module("Poketrainer.State.Abstracts",["ui.router"]).config(["$stateProvider",function(e){e.state("public",{"abstract":!0,views:{header:{templateUrl:"states/abstracts/header.tpl.html",controller:"HeaderController"},content:{template:"<ui-view/>"}}})}]).controller("HeaderController",["$rootScope","$scope","$state","$stateParams","SocketEvent","PokeSocket","Navigation","UserList",function(e,t,r,n,o,a,s,i){t.navigation=s.primary.get(),t.state=r.current.name,t.user=i.getCurrent(),t.reload_api=function(){a.emit(o.ReloadAPI,{username:t.user.username})},t.reset_stats=function(){a.emit(o.ResetStats,{username:t.user.username})},t.stop_bot=function(){a.emit(o.Stop,{username:t.user.username})},t.start_bot=function(){a.emit(o.Start,{username:t.user.username})},t.$on(o._prefix+o.UserStatus,function(e,r){i.update(r),t.user=i.getCurrent()}),e.$on("currentUser_:changed",function(){t.user=i.getCurrent()}),e.$on("$stateChangeSuccess",function(e,r,n,o,a){t.state=r.name});var u=function l(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(a.removeListener(o.UserList,l),i.set(e.users),t.user=i.getCurrent())};"public.users"!==t.state&&(a.on(o.UserList,u),a.emit(o.UserList))}]),angular.module("Poketrainer.State.Status",["ui.router","uiGmapgoogle-maps","chart.js","easypiechart","datatables","ui-leaflet","nemLogging"]).config(["$stateProvider","uiGmapGoogleMapApiProvider",function(e,t){t.configure({v:"3.24",libraries:"weather,geometry,visualization"}),e.state("public.dashboard",{url:"/dashboard/:username",resolve:{locationData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"location"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["location"]}),o.promise}],inventoryData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"inventory"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["inventory"]}),o.promise}],playerData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["player"]}),o.promise}],playerStatsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player_stats"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["player_stats"]}),o.promise}],pokemonData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"pokemon"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["pokemon"]}),o.promise}],fortsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"forts"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["forts"]}),o.promise}],attacksData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,r,n){var o=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"attacks"==e.type)return e.success?void o.resolve(angular.fromJson(e.data)):void o.reject("offline")};return r.on(n.Request,a),r.emit(n.Request,{username:t.username,types:["attacks"]}),o.promise}]},controller:"DashboardController",templateUrl:"states/dashboard/dashboard.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("DashboardController",["$rootScope","$scope","$stateParams","$mdToast","PokeSocket","leafletData","UserList","locationData","inventoryData","playerData","playerStatsData","pokemonData","fortsData","attacksData","SocketEvent","DTOptionsBuilder",function(e,t,r,n,o,a,s,i,u,l,c,p,d,m,f,v){s.setCurrent(r.username),e.$broadcast("currentUser_:changed");var g=function(e,t){r.username==t.username&&"offline"==t.status&&$state.go("public.users")};t.$on(f._prefix+f.UserStatus,g),t.$on("$destroy",function(){o.emit(f.Leave,{room:r.username})}),o.emit(f.Join,{room:r.username});var k,S=function U(e){if(t.evolve_disabled=!1,t.transfer_disabled=!1,e.success)for(var r=t.pokemon.length-1;r>=0;r--)t.pokemon[r].id==k&&t.pokemon.splice(r,1);k=0,o.removeListener(f.Transfer,U),n.show(n.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.transfer_disabled=!1,t.transfer=function(e){k=e,t.evolve_disabled=!0,t.transfer_disabled=!0,o.on(f.Transfer,S),o.emit(f.Transfer,{username:r.username,p_id:e})};var y=function w(e){t.evolve_disabled=!1,t.transfer_disabled=!1,o.removeListener(f.Evolve,w),n.show(n.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.evolve_disabled=!1,t.evolve=function(e){t.evolve_disabled=!0,t.transfer_disabled=!0,o.on(f.Evolve,y),o.emit(f.Evolve,{username:r.username,p_id:e})};var h=function D(e){t.snipe_disabled=!1,o.removeListener(f.Snipe,D),n.show(n.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.snipe_coords="",t.snipe_disabled=!1,t.snipe_auto=!1,t.snipe=function(e){t.snipe_disabled=!0,o.on(f.Snipe,h),o.emit(f.Snipe,{username:r.username,latlng:e})},t.$on("inventory:updated",function(e,r){t.inventory=r,P()}),t.$on("player_stats:updated",function(e,r){t.playerStats=r,P()}),t.$on("player:updated",function(e,r){t.player=r,P()}),t.$on("pokemon:caught",function(e,r){var o=r;t.pokemon.push(o),P(),n.show(n.simple().textContent("Caught: "+o.name+" (IV: "+Math.floor(o.iv)+" | CP: "+o.cp+")").position("top center").hideDelay(3e3))}),t.$on("pokemon:released",function(e,r){for(var o=r,a=t.pokemon.length-1;a>=0;a--)t.pokemon[a].id==o.id&&t.pokemon.splice(a,1);P(),n.show(n.simple().textContent("Released: "+o.name+" (IV: "+Math.floor(o.iv)+" | CP: "+o.cp+")").position("top center").hideDelay(3e3))}),t.$on("pokemon:evolved",function(e,r){for(var o=r.old,a=r["new"],s=t.pokemon.length-1;s>=0;s--)t.pokemon[s].id==o.id&&t.pokemon.splice(s,1);t.pokemon.push(a),n.show(n.simple().textContent("Evolved: "+o.name+" to "+a.name+" (IV: "+Math.floor(a.iv)+" | CP: "+a.cp+")").position("top center").hideDelay(3e3))}),t.$on("fort:spun",function(e,t){n.show(n.simple().textContent("Fort spun, reward: "+t.reward).position("top center").hideDelay(3e3))});var $=0;t.$on("position:update",function(e,r){if($++,$%1==0){t.markers.bot.lat=r[0],t.markers.bot.lng=r[1];var n={lat:r[0],lng:r[1]};t.paths.main.latlngs.push(n)}}),t.player=l,t.playerStats=c,t.inventory=u,t.pokemon=p,t.attacks=m;var P=function(){t.playerStats.xpPercent=Math.floor((t.playerStats.experience-t.playerStats.prev_level_xp)/(t.playerStats.next_level_xp-t.playerStats.prev_level_xp)*100),t.playerStats.uniquePokedexPercent=Math.floor(t.playerStats.unique_pokedex_entries/151*100),t.playerStats.pokemonInvPercent=Math.floor(t.pokemon.length/t.player.max_pokemon_storage*100),t.playerStats.itemsInvPercent=Math.floor(t.inventory.item_count/t.player.max_item_storage*100)};P(),t.$on("$viewContentLoaded",function(){a.getMap().then(function(e){setTimeout(function(){e.invalidateSize()},3e3)})}),t.map={center:{lat:i[0],lng:i[1],zoom:15}};for(var b={},C=0;C<d.length;C++){var _=d[C];1==_.type&&(_.enabled||_.lure_info)&&(b["fort_"+C]={lat:_.latitude,lng:_.longitude,message:_.latitude+", "+_.longitude,icon:{iconUrl:"assets/images/fort.png",iconSize:[30,32],iconAnchor:[16,31]}})}b.bot={lat:i[0],lng:i[1],message:t.player.username,focus:!0,draggable:!1},t.markers=b,t.paths={main:{color:"#F44336",weight:4,latlngs:[{lat:i[0],lng:i[1]}]}},t.pokemonDataTableOptions=v.newOptions().withOption("order",[[0,"desc"]]).withOption("stateSave",!0),t.expLvlOptions={animate:{duration:1e3,enabled:!0},barColor:"#03A9F4",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.uniquePokedexOptions={animate:{duration:1e3,enabled:!0},barColor:"#FFC107",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.pokemonInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#009688",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.itemsInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#F44336",scaleColor:!1,lineWidth:10,lineCap:"circle"}}]),angular.module("Poketrainer.State.Users",["ui.router"]).config(["$stateProvider",function(e){e.state("public.users",{url:"/",resolve:{Users:["$q","$stateParams","PokeSocket","SocketEvent","UserList",function(e,t,r,n,o){var a=e.defer(),s=function i(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(r.removeListener(n.UserList,i),o.set(e.users),a.resolve())};return r.on(n.UserList,s),r.emit(n.UserList),a.promise}]},controller:"UsersController",templateUrl:"states/users/users.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("UsersController",["$scope","UserList","PokeSocket","SocketEvent",function(e,t,r,n){e.users=t.get(),t.setCurrent("");var o=function(r,n){e.users=t.update(n)};e.$on(n._prefix+n.UserStatus,o)}]),angular.module("Poketrainer.Service.Navigation",[]).factory("Navigation",function(){var e=[],t=function(){return e.sort(function(e,t){var r=e.Priority-t.Priority;return 0===r?e.Label.localeCompare(t.Label):r})},r=function(t,r,n,o,a){"string"!=typeof o&&(o="md md-chevron-right"),"string"!=typeof a&&(a=r),("number"!=typeof n||n<0)&&(n=10),e.push({Label:t,State:r,ActiveState:a,Priority:n,Icon:o})};return{primary:{get:t,register:r}}}),angular.module("Poketrainer.Service.SocketEvent",[]).factory("SocketEvent",function(){return{_prefix:"socket:",UserList:"users",UserStatus:"user_status",Request:"pull",Data:"push",Join:"join",Leave:"leave",Transfer:"transfer",Evolve:"evolve",Snipe:"snipe",Start:"start",Stop:"stop",ResetStats:"reset_stats",ReloadAPI:"reload_api"}}),angular.module("Poketrainer.Service.UserList",[]).factory("UserList",function(){var e=[],t="",r=function(t){for(var r=0;r<t.length;r++)t[r].status="unknown";e=t.sort(function(e,t){return e.username.localeCompare(t.username)})},n=function(t){for(var r=0;r<e.length;r++)e[r].username==t.username&&(e[r].status=t.status);return e},o=function(){return e},a=function(e){t=e},s=function(){for(var r=0;r<e.length;r++)if(e[r].username==t)return e[r];return{}};return{set:r,update:n,get:o,setCurrent:a,getCurrent:s}}),angular.module("Poketrainer.Service.Socket",["btford.socket-io"]).factory("PokeSocket",["socketFactory","$location",function(e,t){var r=window.location.pathname.replace(/\/+$/g,"")+"/socket.io";return e({ioSocket:io.connect(window.location.protocol+"//"+window.location.host+"/poketrainer",{path:r})})}]);
//# sourceMappingURL=data:application/json;base64,
