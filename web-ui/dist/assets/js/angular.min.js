angular.module("poketrainer",["poketrainer.Module.Templates","Poketrainer.Module.SocketEventEmitter","Poketrainer.Service.Navigation","Poketrainer.Service.SocketEvent","Poketrainer.Service.Socket","Poketrainer.Service.UserList","Poketrainer.State.Abstracts","Poketrainer.State.Status","Poketrainer.State.Users","ui.router","ngMaterial","ngMessages"]).config(["$urlRouterProvider","$locationProvider","$urlMatcherFactoryProvider","$mdThemingProvider",function(e,t,n,o){e.rule(function(e,t){var n=t.url().toLowerCase();if(!("/"===n[n.length-1]||n.indexOf("/?")>-1))return n.indexOf("?")>-1?n.replace("?","/?"):n+"/"}).otherwise("/"),n.strictMode(!1),o.theme("default").primaryPalette("blue").accentPalette("red")}]).run(["$state","$rootScope","$document",function(e,t,n){t.$on("inventory:updated",function(e,t){}),t.$on("$stateChangeStart",function(){n.find(".screen-loading-overlay").removeClass("hidden")}),t.$on("$stateChangeSuccess",function(){n.find(".screen-loading-overlay").addClass("hidden")}),t.$on("$stateChangeError",function(t,o,r,a,s,i){"offline"===i&&(e.go("public.users"),n.find(".screen-loading-overlay").removeClass("hidden"))})}]),angular.module("Poketrainer.Module.SocketEventEmitter",["Poketrainer.Service.Socket"]).run(["$rootScope","PokeSocket","SocketEvent",function(e,t,n){t.forward(n.UserStatus),t.on(n.Data,function(t){e.$broadcast(t.event+":"+t.action,t.data)})}]),angular.module("Poketrainer.State.Abstracts",["ui.router"]).config(["$stateProvider",function(e){e.state("public",{"abstract":!0,views:{header:{templateUrl:"states/abstracts/header.tpl.html",controller:"HeaderController"},content:{template:"<ui-view/>"}}})}]).controller("HeaderController",["$rootScope","$scope","$state","$stateParams","SocketEvent","PokeSocket","Navigation","UserList",function(e,t,n,o,r,a,s,i){t.navigation=s.primary.get(),t.state=n.current.name,t.user=i.getCurrent(),t.reload_api=function(){a.emit(r.Action,{username:t.user.username,action:"reload_api"})},t.reset_stats=function(){a.emit(r.Action,{username:t.user.username,action:"reset_stats"})},t.stop_bot=function(){a.emit(r.Action,{username:t.user.username,action:"stop_bot"})},t.start_bot=function(){a.emit(r.Action,{username:t.user.username,action:"start_bot"})},t.$on(r._prefix+r.UserStatus,function(e,n){i.update(n),t.user=i.getCurrent()}),e.$on("currentUser_:changed",function(){t.user=i.getCurrent()}),e.$on("$stateChangeSuccess",function(e,n,o,r,a){t.state=n.name});var u=function l(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(a.removeListener(r.UserList,l),i.set(e.users),t.user=i.getCurrent())};"public.users"!==t.state&&(a.on(r.UserList,u),a.emit(r.UserList))}]),angular.module("Poketrainer.State.Status",["ui.router","uiGmapgoogle-maps","chart.js","easypiechart","datatables","ui-leaflet","nemLogging","xeditable"]).config(["$stateProvider","uiGmapGoogleMapApiProvider",function(e,t){t.configure({v:"3.24",libraries:"weather,geometry,visualization"}),e.state("public.dashboard",{url:"/dashboard/:username",resolve:{locationData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"location"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["location"]}),r.promise}],inventoryData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"inventory"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["inventory"]}),r.promise}],playerData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["player"]}),r.promise}],playerStatsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player_stats"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["player_stats"]}),r.promise}],pokemonData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"pokemon"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["pokemon"]}),r.promise}],fortsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"forts"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["forts"]}),r.promise}],attacksData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,n,o){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"attacks"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return n.on(o.Request,a),n.emit(o.Request,{username:t.username,types:["attacks"]}),r.promise}]},controller:"DashboardController",templateUrl:"states/dashboard/dashboard.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("DashboardController",["$rootScope","$scope","$stateParams","$mdToast","$q","PokeSocket","leafletData","UserList","locationData","inventoryData","playerData","playerStatsData","pokemonData","fortsData","attacksData","SocketEvent","DTOptionsBuilder","editableOptions","editableThemes",function(e,t,n,o,r,a,s,i,u,l,c,d,p,m,f,v,k,g,_){i.setCurrent(n.username),e.$broadcast("currentUser_:changed"),_.bs3.inputClass="input-sm",_.bs3.buttonsClass="btn-sm",g.theme="bs3";var y=function(e,t){n.username==t.username&&"offline"==t.status&&$state.go("public.users")};t.$on(v._prefix+v.UserStatus,y),t.$on("$destroy",function(){a.emit(v.Leave,{room:n.username})}),a.emit(v.Join,{room:n.username});var b,h=function R(e){if(t.evolve_disabled=!1,t.transfer_disabled=!1,e.success)for(var n=t.pokemon.length-1;n>=0;n--)if(t.pokemon[n].id==b){t.pokemon.splice(n,1);break}b=0,a.removeListener("release_pokemon_by_id",R),o.show(o.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.transfer_disabled=!1,t.transfer=function(e){b=e,t.evolve_disabled=!0,t.transfer_disabled=!0,a.on("release_pokemon_by_id",h),a.emit(v.Action,{username:n.username,action:"release_pokemon_by_id",params:[e]})};var S=function M(e){t.evolve_disabled=!1,t.transfer_disabled=!1,a.removeListener("evolve_pokemon_by_id",M),o.show(o.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.evolve_disabled=!1,t.evolve=function(e){t.evolve_disabled=!0,t.transfer_disabled=!0,a.on("evolve_pokemon_by_id",S),a.emit(v.Action,{username:n.username,action:"evolve_pokemon_by_id",params:[e]})};var $=function O(e){t.snipe_disabled=!1,a.removeListener("snipe_pokemon",O),o.show(o.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.snipe_coords="",t.snipe_disabled=!1,t.snipe_auto=!1,t.snipe=function(e){t.snipe_disabled=!0,a.on("snipe_pokemon",$),a.emit(v.Action,{username:n.username,action:"snipe_pokemon",latlng:e})};var P,C=function j(e){if(t.upgrade_disabled=!1,a.removeListener("upgrade_pokemon_by_id",j),e.success){t.inventory.pokemon_candy[P.family_id]-=P.candy_needed_to_upgrade,t.player.currencies[1].amount-=P.dust_needed_to_upgrade;for(var n=t.pokemon.length-1;n>=0;n--)if(t.pokemon[n].id==e.upgraded_pokemon.id){t.pokemon[n]=e.upgraded_pokemon;break}}P={},o.show(o.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.upgrade_disabled=!1,t.upgrade=function(e){P=e,t.upgrade_disabled=!0,a.on("upgrade_pokemon_by_id",C),a.emit(v.Action,{username:n.username,action:"upgrade_pokemon_by_id",params:[e.id]})},t.nick_change_disabled=!1,t.nick_change=function(e,s){var i=r.defer(),u=function l(n){if(t.nick_change_disabled=!1,a.removeListener("nickname_pokemon_by_id",l),n.success){i.resolve(!0);for(var r=t.pokemon.length-1;r>=0;r--)if(t.pokemon[r].id==e){t.pokemon[r].name=s;break}}else i.reject(!1);o.show(o.simple().textContent(n.message).position("top center").hideDelay(3e3))};return t.nick_change_disabled=!0,a.on("nickname_pokemon_by_id",u),a.emit(v.Action,{username:n.username,action:"nickname_pokemon_by_id",params:[e,s]}),i.promise};var U,w,D=function J(e){if(t.set_favorite_disabled=!1,a.removeListener("set_favorite_pokemon_by_id",J),e.success)for(var n=t.pokemon.length-1;n>=0;n--)if(t.pokemon[n].id==U){t.pokemon[n].is_favorite=w;break}U=0,w=!1,o.show(o.simple().textContent(e.message).position("top center").hideDelay(3e3))};t.set_favorite_disabled=!1,t.set_favorite=function(e,o){U=e,w=o,t.set_favorite_disabled=!0,a.on("set_favorite_pokemon_by_id",D),a.emit(v.Action,{username:n.username,action:"set_favorite_pokemon_by_id",params:[e,o]})},t.$on("inventory:updated",function(e,n){t.inventory=n,x()}),t.$on("player_stats:updated",function(e,n){t.playerStats=n,x()}),t.$on("player:updated",function(e,n){t.player=n,x()}),t.$on("pokemon:caught",function(e,n){var r=n;t.pokemon.push(r),x(),o.show(o.simple().textContent("Caught: "+r.name+" (IV: "+Math.floor(r.iv)+" | CP: "+r.cp+")").position("top center").hideDelay(3e3))}),t.$on("pokemon:released",function(e,n){for(var r=n,a=t.pokemon.length-1;a>=0;a--)t.pokemon[a].id==r.id&&t.pokemon.splice(a,1);x(),o.show(o.simple().textContent("Released: "+r.name+" (IV: "+Math.floor(r.iv)+" | CP: "+r.cp+")").position("top center").hideDelay(3e3))}),t.$on("pokemon:evolved",function(e,n){for(var r=n.old,a=n["new"],s=t.pokemon.length-1;s>=0;s--)t.pokemon[s].id==r.id&&t.pokemon.splice(s,1);t.pokemon.push(a),o.show(o.simple().textContent("Evolved: "+r.name+" to "+a.name+" (IV: "+Math.floor(a.iv)+" | CP: "+a.cp+")").position("top center").hideDelay(3e3))}),t.$on("fort:spun",function(e,t){o.show(o.simple().textContent("Fort spun, reward: "+t.reward).position("top center").hideDelay(3e3))});var L=0;t.$on("position:update",function(e,n){if(L++,L%1==0){t.markers.bot.lat=n[0],t.markers.bot.lng=n[1];var o={lat:n[0],lng:n[1]};t.paths.main.latlngs.push(o)}}),t.player=c,t.playerStats=d,t.inventory=l,t.pokemon=p,t.attacks=f;var x=function(){t.playerStats.xpPercent=Math.floor((t.playerStats.experience-t.playerStats.prev_level_xp)/(t.playerStats.next_level_xp-t.playerStats.prev_level_xp)*100),t.playerStats.uniquePokedexPercent=Math.floor(t.playerStats.unique_pokedex_entries/151*100),t.playerStats.pokemonInvPercent=Math.floor(t.pokemon.length/t.player.max_pokemon_storage*100),t.playerStats.itemsInvPercent=Math.floor(t.inventory.item_count/t.player.max_item_storage*100)};x(),t.$on("$viewContentLoaded",function(){s.getMap().then(function(e){setTimeout(function(){e.invalidateSize()},3e3)})}),t.map={center:{lat:u[0],lng:u[1],zoom:15}};for(var q={},E=0;E<m.length;E++){var A=m[E];1==A.type&&(A.enabled||A.lure_info)&&(q["fort_"+E]={lat:A.latitude,lng:A.longitude,message:A.latitude+", "+A.longitude,icon:{iconUrl:"assets/images/pstop.png",iconSize:[31,31],iconAnchor:[15,29]}})}q.bot={lat:u[0],lng:u[1],message:t.player.username,focus:!0,draggable:!1},t.markers=q,t.paths={main:{color:"#F44336",weight:4,latlngs:[{lat:u[0],lng:u[1]}]}},t.pokemonDataTableOptions=k.newOptions().withOption("order",[[0,"desc"]]).withOption("stateSave",!0),t.expLvlOptions={animate:{duration:1e3,enabled:!0},barColor:"#03A9F4",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.uniquePokedexOptions={animate:{duration:1e3,enabled:!0},barColor:"#FFC107",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.pokemonInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#009688",scaleColor:!1,lineWidth:10,lineCap:"circle"},t.itemsInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#F44336",scaleColor:!1,lineWidth:10,lineCap:"circle"}}]),angular.module("Poketrainer.State.Users",["ui.router"]).config(["$stateProvider",function(e){e.state("public.users",{url:"/",resolve:{Users:["$q","$stateParams","PokeSocket","SocketEvent","UserList",function(e,t,n,o,r){var a=e.defer(),s=function i(e){!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)&&(n.removeListener(o.UserList,i),r.set(e.users),a.resolve())};return n.on(o.UserList,s),n.emit(o.UserList),a.promise}]},controller:"UsersController",templateUrl:"states/users/users.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("UsersController",["$scope","UserList","PokeSocket","SocketEvent",function(e,t,n,o){e.users=t.get(),t.setCurrent("");var r=function(n,o){e.users=t.update(o)};e.$on(o._prefix+o.UserStatus,r)}]),angular.module("Poketrainer.Service.Navigation",[]).factory("Navigation",function(){var e=[],t=function(){return e.sort(function(e,t){var n=e.Priority-t.Priority;return 0===n?e.Label.localeCompare(t.Label):n})},n=function(t,n,o,r,a){"string"!=typeof r&&(r="md md-chevron-right"),"string"!=typeof a&&(a=n),("number"!=typeof o||o<0)&&(o=10),e.push({Label:t,State:n,ActiveState:a,Priority:o,Icon:r})};return{primary:{get:t,register:n}}}),angular.module("Poketrainer.Service.SocketEvent",[]).factory("SocketEvent",function(){return{_prefix:"socket:",UserList:"users",UserStatus:"user_status",Request:"pull",Data:"push",Join:"join",Leave:"leave",Action:"action"}}),angular.module("Poketrainer.Service.UserList",[]).factory("UserList",function(){var e=[],t="",n=function(t){for(var n=0;n<t.length;n++)t[n].status="unknown";e=t.sort(function(e,t){return e.username.localeCompare(t.username)})},o=function(t){for(var n=0;n<e.length;n++)e[n].username==t.username&&(e[n].status=t.status);return e},r=function(){return e},a=function(e){t=e},s=function(){for(var n=0;n<e.length;n++)if(e[n].username==t)return e[n];return{}};return{set:n,update:o,get:r,setCurrent:a,getCurrent:s}}),angular.module("Poketrainer.Service.Socket",["btford.socket-io"]).factory("PokeSocket",["socketFactory","$location",function(e,t){var n=window.location.pathname.replace(/\/+$/g,"")+"/socket.io";return e({ioSocket:io.connect(window.location.protocol+"//"+window.location.host+"/poketrainer",{path:n})})}]);
//# sourceMappingURL=data:application/json;base64,
